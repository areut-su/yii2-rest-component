<?php
/**
 * Copyright (c) 2020. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
 * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
 * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
 * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
 * Vestibulum commodo. Ut rhoncus gravida arcu.
 */

namespace backend\forms;

use common\components\clients\BaseClient;
use common\components\clients\CRUDInterface;
use common\components\ResponseDataProvider;
use common\errormanager\exception\ExceptionRemoteAPI;
use common\helpers\HArray;
use common\helpers\HPagination;
use common\services\ServiceRelationV2;
use common\traits\PopulatedTrait;
use Exception;
use Throwable;
use Yii;
use yii\base\InvalidConfigException;
use yii\base\Model;
use yii\web\NotFoundHttpException;


abstract class ModelClientBase extends Model
{

  use PopulatedTrait;

  protected static $_client;
  protected static $_listData = [];

  protected $enable_send_request = true;

  /**
   * * $arrayOptions = [
   * Company::class => [
   * 'classRelation' => Company::class,
   * 'class_key' => 'id',
   * 'class_ids' => [],
   * 'class_model' => [],
   * 'data_key' => 'payment_id',
   * 'data_alias' => 'company',
   * ]
   * ];
   * @var array  опууии для связнной модели
   */
  protected $relation_option = [];

  protected $expand = [];


  const  SCENARIO_INDEX = 'index';
  /**
   * @var
   */
  public static $clientClass;
  /**
   * @var $client ::CONTROLLER_COMPANY_PRODUCT
   */
  public static $clientController;

  /**
   * @return array
   */
  public static function listData($type = 1)
  {
    try {
      if (!isset(static::$_listData[static::$clientController][$type])) {
        $client = static::getClient();
        static::$_listData[static::$clientController][$type] = $client->listData(static::$clientController, [], $type);
      }
      return static::$_listData[static::$clientController][$type];
    } catch (Exception $e) {
      Yii::warning($e->getMessage());
      return [];
    }

  }

  public static function listDataParams($params, $type = 1)
  {
    try {
      $client = static::getClient();
      return $client->listData(static::$clientController, $params, $type = 1);
    } catch (Exception $e) {
      Yii::warning($e->getMessage());
      return [];
    }

  }


  /**
   * @return CRUDInterface|BaseClient
   * @throws InvalidConfigException
   */
  public static function getClient()
  {
    if (static::$_client === null) {
      self::createClient();
    }
    return static::$_client;
  }

  /**
   * @param $clientClass
   * @param $controller
   * @return static
   * @throws InvalidConfigException
   */
  public static function createModel($clientClass = null, $controller = null)
  {
    $m = new static();
    if (isset($clientClass)) {
      $m::$clientClass = $clientClass;
    }

    if (isset($controller)) {
      $m::$clientController = $controller;
    }
    $m::createClient();

    return $m;
  }

  /**
   * @return object
   * @throws InvalidConfigException
   */
  protected static function createClient(): object
  {
    return static::$_client = Yii::createObject(static::$clientClass);
  }


  public function scenarios()
  {
    return parent::scenarios(); // TODO: Change the autogenerated stub
  }


  /**
   * @param $paramsIN
   * @return ResponseDataProvider
   * @throws Exception
   */
  public function search($paramsIN, $forName = null, $extraModel = [])
  {
    $this->rules();
    $this->scenario = static::SCENARIO_INDEX;
    $this->load($paramsIN, $forName);
    $data = [];
    /**
     * @var $client BaseClient
     */
    $client = static::getClient();
    if ($this->validate()) {
      if ($this->enable_send_request) {
        $params = HArray::filterEmptyValue(array_intersect_key($this->attributes, array_flip($this->safeAttributes())));
        $data = $client->index(static::$clientController, $params + HPagination::getForRequest($paramsIN) + ['expand' => implode(',', $this->expand)]);
      } else {
        $data = [];
      }
    }

    if (isset($data['data']['items']) && is_array($data['data']['items'])) {
      $service = ServiceRelationV2::create($data['data']['items']);
      $data['data']['items'] = $service->setExtraModels($this->relation_option);
    }
    $dataProvider = $client::createArrayDataProvider($data);
    return $dataProvider;
  }

  /**
   * @return bool
   */
  public function isEnableSendRequest(): bool
  {
    return $this->enable_send_request;
  }

  /**
   * @param bool $enable_send_request
   */
  public function setEnableSendRequest(bool $enable_send_request): void
  {
    $this->enable_send_request = $enable_send_request;
  }

  /**
   * @param $id
   * @return static
   * @throws InvalidConfigException
   * @throws ExceptionRemoteAPI
   * @throws NotFoundHttpException
   * @throws Exception
   */
  public static function getView($id, $scenario = Model::SCENARIO_DEFAULT)
  {
    $model = new static();
    $model->scenario = $scenario;
    $client = static::getClient();
    $client->view(static::$clientController, ['id' => (int)$id]);
    $client->loadResult($model);
    return $model;
  }

  /**
   * @param array $params
   * @return static
   * @throws InvalidConfigException
   * @throws ExceptionRemoteAPI
   * @throws NotFoundHttpException
   * @throws Exception
   */
  public static function getViewByParams(array $params)
  {
    $model = new static();
    $client = static::getClient();
    $client->view(static::$clientController, $params);
    $client->loadResult($model);
    return $model;
  }

  /**
   * @param array $params
   * @param null $forName
   * @return static
   * @throws InvalidConfigException
   * @throws Throwable
   */
  public static function create(array $params, $forName = null)
  {
    $model = new static();
    $client = static::getClient();
    try {
      if ($model->load($params, $forName) && $model->validate()) {
        $data = $client->create(static::$clientController, $model->toArray());
        $model = new static();
        if ($client->loadResult($model)) {
          return $model;
        }
        return $model; // модель с ошибками
      }
    } catch (Throwable $e) {
      throw  $e;
    }
  }

}
